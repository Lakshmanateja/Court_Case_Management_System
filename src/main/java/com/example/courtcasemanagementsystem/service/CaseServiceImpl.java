package com.example.courtcasemanagementsystem.service;

import com.example.courtcasemanagementsystem.model.CaseDetails;
import com.example.courtcasemanagementsystem.repo.CaseRepo;
import com.sun.jdi.event.ExceptionEvent;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import javax.management.InstanceAlreadyExistsException;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Properties;

import javax.mail.*;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Properties;

@Service
public class CaseServiceImpl implements CaseService{

    @Autowired
    private CaseRepo caseRepo;

    @Autowired
    private CourtServiceImpl courtService;

    /**
     * createCaseDetails method adds the case details by passing the case details object
     *
     * @param caseDetails this object contains all the details
     * @return caseDetails object after creating
     * @throws InstanceAlreadyExistsException if case is already exists
     * @author Lakshmana Teja Kapuganti
     */
    public CaseDetails createCaseDetails(CaseDetails caseDetails) throws InstanceAlreadyExistsException{
        if(getCaseById(caseDetails.getCaseId())!=null){
            throw new InstanceAlreadyExistsException("Case details already exists.");
        }
        try{
            courtService.updateCaseIdInCourtDetails(caseDetails.getCaseId(), caseDetails.getCourtId());
            sendingMailForNewCase(caseDetails.getCaseId());
            return caseRepo.save(caseDetails);
        }
        catch(Exception e){
            throw new IllegalArgumentException("Case details input data is incorrect.");
        }
    }

    /**
     * getCaseById method retrieves the case details for a particular caseId
     *
     * @param caseId the id of a particular case
     * @return the case details object
     * @author Lakshmana Teja Kapuganti
     */
    public CaseDetails getCaseById(int caseId){
        return caseRepo.findById(caseId).orElse(null);
    }

    /**
     * getAllCaseDetails method retrieves all the case details in the database
     *
     * @return list of all case details objects
     * @author Lakshmana Teja Kapuganti
     */
    public List<CaseDetails> getAllCaseDetails(){
        return caseRepo.findAll();
    }

    /**
     * updateCaseDetails method updates the case details by passing the case details object
     *
     * @param caseDetails this object contains all the details
     * @return caseDetails object after updating
     * @throws IllegalArgumentException if input data is incorrect
     * @author Lakshmana Teja Kapuganti
     */
    public CaseDetails updateCaseDetails(CaseDetails caseDetails) throws IllegalArgumentException{
        try{
            courtService.updateCaseIdInCourtDetails(caseDetails.getCaseId(), caseDetails.getCourtId());
            return caseRepo.save(caseDetails);
        }
        catch(Exception e){
            throw new IllegalArgumentException("Case details input data is incorrect.");
        }
    }

    /**
     * deleteCaseDetails method deletes the case details by passing the caseId, courtId
     * By passing the courtId it will also delete the caseId in the court details database
     *
     * @param caseId,courtId id of case and id of court at where the case is running
     * @throws NoSuchElementException if case is not found
     * @author Lakshmana Teja Kapuganti
     */
    public void deleteCaseDetails(int caseId, int courtId) throws NoSuchElementException{
        try{
            courtService.deleteCaseIdInCourtDetails(caseId, courtId);
            caseRepo.deleteById(caseId);
        }
        catch(Exception e){
            throw new NoSuchElementException("Case details not found");
        }
    }

    /**
     * updateNumberOfDays method updates the number of days field in case details
     * This method is basically called for every 24 hours by cron job
     *
     * @author Lakshmana Teja Kapuganti
     */
    @Scheduled(cron="0 0 0 * * *")
    public void updateNumberOfDays(){
        List<CaseDetails> cases = caseRepo.findAll();
        for(CaseDetails caseDetails : cases){
            caseDetails.setNumberOfDays(caseDetails.getNumberOfDays() + 1);
        }
        caseRepo.saveAll(cases);
    }

    /**
     * sendingMailForNewCase method sends an email to the admin from the system whenever a case is added
     * The password here is not original password, it is 16 character code security key generated by google account
     *
     * @param caseId the id of the case which is added
     * @author Lakshmana Teja Kapuganti
     */
    public void sendingMailForNewCase(int caseId) {
        final String username = "courtcasesystem@gmail.com";
        final String password = "nsln lqeu zmnv uawr";


        Properties prop = new Properties();
        prop.put("mail.smtp.host", "smtp.gmail.com");
        prop.put("mail.smtp.port", "587");
        prop.put("mail.smtp.auth", "true");
        prop.put("mail.smtp.starttls.enable", "true"); //TLS


        Session session = Session.getInstance(prop,
                new javax.mail.Authenticator() {
                    @Override
                    protected PasswordAuthentication getPasswordAuthentication() {
                        return new PasswordAuthentication(username, password);
                    }
                });


        try {
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress("courtcasesystem@gmail.com"));
            message.setRecipients(
                    Message.RecipientType.TO,
                    InternetAddress.parse("admin@gmail.com")
            );
            message.setSubject("New Case added");
            message.setText("New Case " + caseId + " added successfully \n\n Please do not reply. This is system generated email");


            Transport.send(message);
            LOGGER.info("Mail sent successfully after case creation");


        } catch (MessagingException e) {
            LOGGER.error(e.getMessage());
        }
    }
}
